{"version":3,"sources":["Routes.js","serviceWorkerRegistration.js","index.js"],"names":["Admin","lazy","Auth","First","AccountManagement","Info","LandingLayout","Profiles","Setting","DetailsFormation","Index","Routes","_jsx","_Fragment","children","Suspense","fallback","className","InfinitySpin","width","height","color","_jsxs","Switch","Route","path","component","exact","Redirect","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e6a337bb.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { InfinitySpin } from \"react-loader-spinner\";\r\n\r\n// layouts\r\nconst Admin = lazy(() => import(\"layouts/Admin.js\"));\r\nconst Auth = lazy(() => import(\"layouts/Auth.js\"));\r\nconst First = lazy(() => import(\"./layouts/First.js\"));\r\nconst AccountManagement = lazy(() => import(\"./layouts/AccountManagement.js\"));\r\nconst Info = lazy(() => import(\"./layouts/Info.js\"));\r\nconst LandingLayout = lazy(() => import(\"./layouts/LandingLayout.js\"));\r\nconst Profiles = lazy(() => import(\"./layouts/Profiles.js\"));\r\n\r\n// views without layouts\r\nconst Setting = lazy(() => import(\"./views/FrontOffice/AccountManagement/Setting.js\"));\r\nconst DetailsFormation = lazy(() => import(\"./views/FrontOffice/client/DetailsFormation.js\"));\r\nconst Index = lazy(() => import(\"views/Index.js\"));\r\n// const createFormation = lazy(() => import(\"views/FrontOffice/Center/GestionFormation.js\"));\r\n\r\nfunction Routes() {\r\n  return (\r\n    <>\r\n      <Suspense\r\n        fallback={\r\n          <div className=\"flex justify-center items-center h-screen\">\r\n            <InfinitySpin width=\"200\" height=\"200\" color=\"#4fa94d\" />\r\n          </div>\r\n        }\r\n      >\r\n        <Switch>\r\n          {/* add routes with layouts */}\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/auth\" component={Auth} />\r\n          <Route path=\"/First\" component={First} />\r\n          <Route path=\"/AccountManagement\" component={AccountManagement} />\r\n          <Route path=\"/Info\" component={Info} />\r\n          <Route path=\"/landing\" component={LandingLayout} />\r\n          <Route path=\"/profile\" component={Profiles} />\r\n\r\n          {/* add routes without layouts */}\r\n          {/*<Route path=\"/profile\" exact component={Profile} />*/}\r\n          <Route path=\"/Setting\" exact component={Setting} />\r\n          {/*<Route path=\"/createFormation\" exact component={createFormation} />*/}\r\n          <Route path=\"/DetailsFormation/:id\" exact component={DetailsFormation} />\r\n          <Route path=\"/\" exact component={Index} />\r\n          {/* add redirect for first page */}\r\n          <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Routes from './Routes';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"assets/styles/tailwind.css\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Routes />\r\n  </BrowserRouter>,\r\ndocument.getElementById(\"root\")\r\n);\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}